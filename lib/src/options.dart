import 'dart:io';

import 'package:args/args.dart';
import 'package:path/path.dart' as p;

/// Global options
class Options {
  String branch = 'master';
  bool dryRun = true;
  bool forceBuild = false;
  String ghPagesAppDir;
  bool keepTmp = false;
  bool push = true;
  /*@nullable*/ RegExp match;
  String user = 'dart-lang';
  bool verbose = false;
  // Usage help text generated by arg parser
  String usage = '';
  /*@nullable*/ String workDir;

  bool get isValidWorkDir {
    if (workDir == null) return true;
    final path = new Directory(workDir);
    return path.existsSync();
  }
}

Options options = new Options();

// TODO: make these configurable? (with defaults as given)
const dartDocHostUri = 'https://webdev.dartlang.org';
const dartDocUriPrefix = dartDocHostUri + '/angular';
const exampleConfigFileName = '.docsync.json';
const exampleHostUriPrefix = '$dartDocHostUri/examples/ng/doc';
const tempFolderNamePrefix = 'dds-';

Directory initWorkingDir() {
  final tmpEnvVar = Platform.environment['TMP'];
  if (tmpEnvVar != null) {
    final dir = new Directory(tmpEnvVar);
    if (dir.existsSync()) return dir;
  }
  return Directory.systemTemp;
}

Directory workDir;

const Map<String, String> _help = const {
  'branch': '<branch-name>\ngit branch to fetch webdev and examples from',
  'gh-pages-app-dir': '<path>\ndirectory in which the generated example apps '
      'will be placed (gh-pages branch)\n',
  'dry-run': 'show which commands would be executed but make (almost) '
      'no changes;\nonly the temporary directory will be created',
  'force-build': 'forces build of example app when sources have not changed',
  'help': 'show this usage information',
  'keep-tmp': 'do not delete temporary working directory once done',
  'push': 'prepare updates and push to example repo',
  'match': '<dart-regexp>\n'
      'sync all examples having a data file ($exampleConfigFileName)\n'
      'and whose repo path matches the given regular expression;\n'
      'use "." to match all',
  'user': '<user-id>\nGitHub id of repo to fetch examples from',
  'work-dir': '<path>\npath to a working directory; when unspecified '
      'a system-generated path to a temporary directory is used'
};

/// Processes command line options and returns remaining arguments.
List<String> processArgs(List<String> args) {
  ArgParser argParser = new ArgParser(allowTrailingOptions: true);

  argParser.addFlag('help', abbr: 'h', negatable: false, help: _help['help']);
  argParser.addOption('branch',
      abbr: 'b', help: _help['branch'], defaultsTo: options.branch);
  argParser.addFlag('dry-run',
      abbr: 'n', negatable: false, help: _help['dry-run']);
  argParser.addFlag('force-build',
      abbr: 'f', negatable: false, help: _help['force-build']);
  argParser.addOption('gh-pages-app-dir',
      abbr: 'g',
      help: _help['gh-pages-app-dir'],
      defaultsTo: options.ghPagesAppDir);
  argParser.addFlag('keep-tmp',
      abbr: 'k', negatable: false, help: _help['keep-tmp']);
  argParser.addFlag('push',
      abbr: 'p', help: _help['push'], defaultsTo: options.push);
  argParser.addOption('match', abbr: 'm', help: _help['match']);
  argParser.addOption('user',
      abbr: 'u', help: _help['user'], defaultsTo: options.user);
  argParser.addFlag('verbose',
      abbr: 'v', negatable: false, defaultsTo: options.verbose);
  argParser.addOption('work-dir', abbr: 'w', help: _help['work-dir']);

  var argResults;
  try {
    argResults = argParser.parse(args);
  } on FormatException catch (e) {
    printUsageAndExit(e.message, 0);
  }

  options.usage = argParser.usage;
  if (argResults['help']) printUsageAndExit();

  options
    ..branch = argResults['branch']
    ..dryRun = argResults['dry-run']
    ..forceBuild = argResults['force-build']
    ..ghPagesAppDir = argResults['gh-pages-app-dir']
    ..keepTmp = argResults['keep-tmp']
    ..push = argResults['push']
    ..match =
        argResults['match'] != null ? new RegExp(argResults['match']) : null
    ..user = argResults['user']
    ..verbose = argResults['verbose']
    ..workDir = argResults['work-dir'];

  validateAndNormalizeGhPagesAppDir();

  if (!options.isValidWorkDir)
    printUsageAndExit("Invalid --workDir '${options.workDir}'");

  workDir = options.workDir == null
      ? initWorkingDir().createTempSync(tempFolderNamePrefix)
      : new Directory(options.workDir);

  return argResults.rest;
}

void validateAndNormalizeGhPagesAppDir() {
  // FIXME: revert temporary change once all scripts have been updated. Also make '' the new default.
  // Temporarily making --gh-pages-app-dir mandatory.
  if (options.ghPagesAppDir == null)
    printUsageAndExit("Option --gh-pages-app-dir is currently mandatory, "
        "and it usually matches the major Angular version number being used "
        "by the example apps; e.g., --gh-pages-app-dir=4. "
        "Use '' if you reall mean to use an empty path");

  if (options.ghPagesAppDir.startsWith('/'))
    printUsageAndExit("Invalid --gh-pages-app-dir '${options.ghPagesAppDir}'; "
        'path must be relative');

  if (options.ghPagesAppDir.isNotEmpty && options.ghPagesAppDir.endsWith('/'))
    options.ghPagesAppDir =
        options.ghPagesAppDir.substring(0, options.ghPagesAppDir.length - 1);
}

void printUsageAndExit([String _msg, int exitCode = 1]) {
  var msg = 'Syncs Angular docs example applications';
  if (_msg != null) msg = _msg;
  print('''

$msg.

Usage: ${p.basenameWithoutExtension(Platform.script.path)} [options] [<exampleName> | <examplePath> <exampleRepo>]

${options.usage}
''');
  exit(exitCode);
}
